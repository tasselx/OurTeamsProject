package com.lvguo.ctrlc.utils.sdcard;

import java.io.File;

import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;

/**  
* @Title: SDCardControlUtil.java
* @Package com.lvguo.ctrlc.utils.sdcard
* @Description: SD卡存储控制类
* @author XiaoMa
*/
public class SDCardControlUtil {
	
	/**日志标志*/
	public static final String TAG = "SDCheck";
	/**ROOT根路径*/
	public static String ROOTPATH = "/CtrlC";
	/**新版本apk存储路径*/
	public static String DOWNLOADPATH = "/download";
	/**看大图存储路径*/
	public static String PICTURESAVE = "/picturesave";
	/**头像与拍照照片存储路径*/
	public static String PORTRAIT_PHOTO = "/portraitphoto";
	/**ROOT根目标*/
	public static String ROOT;
	/**上下文环境*/
	@SuppressWarnings("unused")
	private static Context context ;
	
	/**
	 * 构造取环境
	 * @param context
	 */
	@SuppressWarnings("static-access")
	public SDCardControlUtil(Context context ) {
		this.context = context;
	}
	
	/**
	 * 获取工程根路径
	 * @return 工程根路径绝对路径
	 */
	public static String getCtrlCPath(){
		return ROOTPATH;
	}
	
	/**
	 * 获取下载图片路径
	 * @return 工程下载图片文件夹绝对路径
	 */
	public static String getDownLoadPath(){
		return DOWNLOADPATH;
	}
	
	/**
	 * 获取头像等存储路径
	 * @return 工程头像等存储绝对路径
	 */
	public static String getPortraitPhotoPath(){
		return PORTRAIT_PHOTO;
	}
	
	/**
	 * 获取保存图片路径
	 * @return 看大图时保存图片路径
	 */
	public static String getPictureSavePath(){
		return PICTURESAVE;
	}
	
	
	/**
	 * 获取指定名字的文件夹路径
	 * @param foldername  要获取文件夹的名字
	 * @return 要获取指定文件夹的绝对路径
	 */
	public static String getPointPath(String foldername){
		if(sdCardIsExist()){
			File file = new File(Environment.getExternalStorageDirectory().getPath()+foldername);
			if(file.exists()){
				return file.getAbsolutePath();
			}else{
				return null;
			}
		}
		return null ;
	}
	
	
	/**
	 * 检测存储卡是否插入
	 * @return SD卡是否存在
	 */
	public static boolean sdCardIsExist(){
		if(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){
			return false;
		}
		return true;
	}
	
	/**
	 * 初始化SD卡使用文件路径
	 */
	public static void initSDCardPath(){
		if( sdCardIsExist() && checkSpace() ){
			ROOT = Environment.getExternalStorageDirectory().getPath();
		}else{
			Log.i(TAG, "无SD卡,重新指定路径Data下");
			ROOT = "/data/data";
		}
		
		if (ROOTPATH.equals("/CtrlC")) {
            ROOTPATH = ROOT + ROOTPATH;
            DOWNLOADPATH = ROOTPATH + DOWNLOADPATH;
            PORTRAIT_PHOTO = ROOTPATH + PORTRAIT_PHOTO;
            PICTURESAVE = ROOTPATH + PICTURESAVE;
        }

        File rootPath = new File(ROOTPATH);
        if (!rootPath.exists()) {
            rootPath.mkdirs();
            Log.d(TAG, "ROOTPATH 路径创建成功");
        }

        File downloadPath = new File(DOWNLOADPATH);
        if (!downloadPath.exists()) {
            downloadPath.mkdirs();
            Log.d(TAG, "DOWNLOAD 新版本apk存储路径创建成功");
        }
        
        File picSavePath = new File(PICTURESAVE);
        if (!picSavePath.exists()) {
        	picSavePath.mkdirs();
            Log.d(TAG, "picSavePath 存储图片路径创建成功");
        }
        
        File portraitOrPhotoPath = new File(PORTRAIT_PHOTO);
		if(!portraitOrPhotoPath.exists()){
			portraitOrPhotoPath.mkdirs();
			Log.d(TAG, "PORTRAIT_PHOTO 头像与拍照照片存储路径创建成功");
		}
	}
	
	
	/**
	 * 检测存储卡存储空间
	 * @return  false(空间不足) true(可使用)
	 */
	public static boolean checkSpace(){
			String path = Environment.getExternalStorageDirectory().getPath();
			StatFs statFs = new StatFs(path);
			/**取得存储块大小*/
			int blockSize = statFs.getBlockSize()/1024;
			/**取得存储块总数*/
			int blockCount = statFs.getBlockCount();
			/**取得存储块已使用空间*/
			int usedBlocks = statFs.getAvailableBlocks()/1024;
			/**总存储空间*/
			int totalSpace = blockCount*blockSize/1024;
			/**取得可用存储空间*/
			int avaliableSpace = totalSpace - usedBlocks;
			/**当存储空间小于64M时提示不足*/
			if(avaliableSpace < 64 ){
				return false;
			}
		return true;
	}
}
